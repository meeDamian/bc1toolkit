// Code generated by "esc "; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/templates/block.html": {
		local:   "templates/block.html",
		size:    2005,
		modtime: 1536411333,
		compressed: `
H4sIAAAAAAAC/6xVQY/bLBC9768YWTl+XvSt9lBVXkvb9tDTqlK36hmHiaElkAJ2vEX+7xXGTlgn6VpK
Lw7MPN6bGSaD9ww3QiFka60cKpf1/U3BRAtrSa19yIzeZ+UNAEDB78oPUq9/wid0VEhbEH5X3hSEiba8
dCaxrrXMtyx/N7oGt6OVxAkQN8M3r7RhaJCNW65bNOPaOiN2yKCq8z0XDhO+yFlp9jK3mdeGaOTlZxQ1
dwVx/Jyfld7fDinfRmDfF8SxGTeZk19Wo5Yv0aKWX6n0LLa4QCnArlUyVFm6dkIru0Sx+6gbdW0hv4rf
f01PGxj1AhKyJ/KYXSn5/c1OOYpG7D+R/WKwFbqxUAXmy/IFBW5w85CFSlOL34zsezIcIofiB7LYXFl5
xlgQWl4V7BN27q1AvRebqU4BH6VPoAN8SU5HjiSnozHkdELuPSq28GLIbJwUZJhC43iLs2/JpOP3s78K
v4/etCDPnU1qUTRyYpTCurw2utklnN6vAluLzx28f4Dbx3GTUHi/qmLlBsShignAUFUjrMR/sHKdYBF3
JpohIilOI8qFwy2wfCOxgx+NdWLzko+vSV6h2yMqkDyYGCqLLKaMv+AY/iDd93E/Xk92poFCuZO2mJLr
e+I64v1IEzphXMaePtzSKzK7o+rw9mDn8m3jkIXDlDFYCfg/nA+oeU9Ikd7CEG3SII2cbhalxdSVKlaU
1QjDN99To4Sqs/F9ZdRRUNoBbamQod3SMFLB6fGNP5PnTwAAAP//ik4TbtUHAAA=
`,
	},

	"/templates/overview.html": {
		local:   "templates/overview.html",
		size:    4794,
		modtime: 1536411333,
		compressed: `
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
KV2cf2XEm272pup/AQAA//+3yJJRuhIAAA==
`,
	},

	"/templates/tx.html": {
		local:   "templates/tx.html",
		size:    3518,
		modtime: 1536411333,
		compressed: `
H4sIAAAAAAAC/6RWT4/bthO976cg+MsPaA+ynEWQw0YWsJsgqAN0t8i6Tm8FZY4tpjSpkiP/qaDvXpCS
bMkreWP3YphD8j1y5s2jioLDUiggdKEVgkJaljcRFxuykMzaCTV6S+MbQgiJ0tt4ZpiybIFCK/IJkAlp
ozC9jW+ikItNPLQTWSKhiVcD/xsk2nAwwOthqjdg6v8WjciAk2QVbFOBUGNVeInm+/bYHAdVII1nf0w/
RSGmpzM8LorRbDea8rKMQuQtmLCN0wv6C7PpOVA3fwXsR62WwqyZy6sdwteGjB6kXvw16iwndEyvoJwq
4sH62TqBohDLmrosOzN+OSOpgeWEFsXogVn43ciyDBO3OnQhf+IqLyHuwmPyaXwyHYXslBikhT5OmzHV
6ClhfAXE/waZEWtm9jT+FdaZ1jIK3coXqIqfgF6cvmfxD5wTgpu/oirz13DnVwJ/A7FK8RxyteIK6JlG
JslUZTkOahd1rgQSx+OXTxWhD7OP9Gq6pxwv4XvK8WrCzwA/QPMZ4L8wGIY/yPKVIRBqGYYPr3GFLZ+M
Qm+rrzl1K7rQsu256bu4qXH6rhXPZbNBCovByug8a+0rijdJ5QrkbkKODtFaYJhagb/eXCh72plSvMQP
BMKa8GApYUe+5xbFch/UD1iQAG4BFJGpC3FQFjjtc7TfDGyecuzzF5+i06jftULykwR12D2659yAtWB/
JuMeqBOLbJLRMkPByzJU7v9cu9M4XxSKw66Hw1G8sMm2VT6G933+Vimg91YdL0XYYbDO0WXsKLzmGHMm
85bKe611wLAd9eVpqMPuxj2n7zdyKdri666Iwlw27XCAO6/5g9FcKHrl5f44JHSd4wVKb0vZqxD+Jm+U
hyfua2wD9U1pfMVb6fK8z2CopK5VnjNQeMlDvGVGCbWisXU7L9PKEKbNFwuwlsa5OofaL/5e7VdFfh93
O7vd0aQsD93Y6cKaKArT9wO4/X3VySfx9zjU7thxr3baQENfKP/+t4CsMbhtHoSspfokR9SK4D6DCa0G
9FAoVCRBdVAV4QxZgHq1kuD7SrLMAq0d4H9N4M/v1oEYLY+QLy7KjGAB7DKmOPAJXTLpkHzUmb7R0h4p
KsRuWp5TvSVf77+RL1arVjoqwiYl2WBCjscXvJ/JWUVDcPSKyNWdGWBEsTVMqGHb6r4W9+7CW8ExvXs7
Hv//Q+o/v+7ejmH9oba+0Zfnp0f/xNcoh/M1hf03AAD//ziZca++DQAA
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/templates": {
		isDir: true,
		local: "templates",
	},
}
